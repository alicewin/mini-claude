import streamlit as st
import json
import os
from datetime import datetime, timedelta
import pandas as pd

st.set_page_config(
    page_title="90-Second Briefings Dashboard",
    page_icon="📊",
    layout="wide"
)

st.title("📊 90-Second Briefings Dashboard")
st.markdown("*AI-Curated News for Busy Professionals*")

# Sidebar
st.sidebar.title("Navigation")
page = st.sidebar.selectbox("Choose a page", [
    "📈 Overview", 
    "📰 Latest Briefings", 
    "⚙️ Settings",
    "📊 Analytics"
])

if page == "📈 Overview":
    st.header("System Overview")
    
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric("Active Subscribers", "1,247", "+23")
    
    with col2:
        st.metric("Briefings Generated", "89", "+12")
    
    with col3:
        st.metric("Average Quality", "94%", "+2%")
    
    with col4:
        st.metric("Delivery Success", "99.2%", "+0.1%")
    
    # Recent briefings
    st.subheader("Recent Briefings")
    
    # Load recent briefings (mock data)
    briefings_data = [
        {"Date": "2024-07-28", "Title": "Tech Daily Briefing", "Articles": 15, "Quality": "96%"},
        {"Date": "2024-07-27", "Title": "Startup Weekly Roundup", "Articles": 42, "Quality": "94%"},
        {"Date": "2024-07-26", "Title": "Tech Daily Briefing", "Articles": 18, "Quality": "92%"},
    ]
    
    df = pd.DataFrame(briefings_data)
    st.dataframe(df, use_container_width=True)

elif page == "📰 Latest Briefings":
    st.header("Latest Briefings")
    
    # Load briefing files
    briefing_files = []
    if os.path.exists("data"):
        briefing_files = [f for f in os.listdir("data") if f.startswith("briefing_") and f.endswith(".json")]
    
    if briefing_files:
        for file in sorted(briefing_files, reverse=True)[:5]:
            try:
                with open(f"data/{file}", 'r') as f:
                    briefing = json.load(f)
                
                with st.expander(f"📄 {briefing['title']}"):
                    st.write(f"**Generated:** {briefing['generated_at']}")
                    st.write(f"**Articles:** {briefing['total_articles']}")
                    st.write(f"**Quality:** {briefing['credibility_score']:.1%}")
                    st.write(f"**Summary:** {briefing['summary']}")
                    
                    if briefing.get('key_takeaways'):
                        st.write("**Key Takeaways:**")
                        for takeaway in briefing['key_takeaways']:
                            st.write(f"• {takeaway}")
                            
            except Exception as e:
                st.error(f"Error loading {file}: {e}")
    else:
        st.info("No briefings found. Generate your first briefing!")

elif page == "⚙️ Settings":
    st.header("System Settings")
    
    st.subheader("Email Configuration")
    email_enabled = st.checkbox("Enable Email Delivery", value=True)
    smtp_server = st.text_input("SMTP Server", value="smtp.gmail.com")
    smtp_port = st.number_input("SMTP Port", value=587)
    
    st.subheader("Notion Integration")
    notion_enabled = st.checkbox("Enable Notion Export", value=False)
    notion_token = st.text_input("Notion Integration Token", type="password")
    
    st.subheader("Audio Generation")
    audio_enabled = st.checkbox("Enable Audio Briefings", value=True)
    voice_profile = st.selectbox("Voice Profile", ["professional", "conversational", "tech_focused"])
    
    if st.button("Save Settings"):
        st.success("Settings saved successfully!")

elif page == "📊 Analytics":
    st.header("Analytics Dashboard")
    
    # Mock analytics data
    st.subheader("Subscriber Growth")
    dates = pd.date_range(start="2024-01-01", end="2024-07-28", freq="D")
    growth_data = pd.DataFrame({
        "Date": dates,
        "Subscribers": range(100, 100 + len(dates))
    })
    st.line_chart(growth_data.set_index("Date"))
    
    st.subheader("Content Quality Over Time")
    quality_data = pd.DataFrame({
        "Date": dates[-30:],
        "Quality Score": [0.9 + (i % 10) * 0.01 for i in range(30)]
    })
    st.line_chart(quality_data.set_index("Date"))

# Footer
st.markdown("---")
st.markdown("🤖 **Powered by Mini-Claude Workers** | Generated by Claude Senior Engineer")